generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DATABASE_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/models/zod"
  createInputTypes                 = false
  writeNullishInModelTypes         = true
  createOptionalDefaultValuesTypes = true
}

model User {
  id          String    @id @db.Uuid
  /// @zod.string.min(6).max(32)
  accountName String    @db.VarChar(32)
  /// @zod.string.min(1).max(32)
  displayName String    @db.VarChar(32)
  biography   String?
  /// @zod.string.url()
  externalUrl String?   @db.VarChar(192)
  iconPath    String?   @db.VarChar(192)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?

  posts    Post[]
  spots    Spot[]
  comments Comment[]
  likes    Like[]

  follows   Follow[] @relation("follower")
  followers Follow[] @relation("followee")
}

model Post {
  /// @zod.string.max(10)
  id          String    @id @db.VarChar(10)
  userId      String    @db.Uuid
  spotId      Int?
  title       String    @default("")
  caption     String    @default("")
  imagePath   String    @db.VarChar(192)
  camera      String?   @db.VarChar(192)
  lens        String?   @db.VarChar(192)
  focalLength String?   @db.VarChar(192)
  fnumber     String?   @db.VarChar(192)
  shutter     String?   @db.VarChar(192)
  iso         String?   @db.VarChar(192)
  wb          String?   @db.VarChar(192)
  shotAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?

  user User  @relation(fields: [userId], references: [id])
  spot Spot? @relation(fields: [spotId], references: [id])

  comments Comment[]
  likes    Like[]
  hashTags HashTag[]
}

model HashTag {
  id     Int    @id @default(autoincrement())
  postId String
  text   String @db.VarChar(192)

  post Post @relation(fields: [postId], references: [id])
}

model Spot {
  id        Int       @id @default(autoincrement())
  userId    String    @db.Uuid
  name      String?
  title     String
  latitude  Float
  longitude Float
  private   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  posts Post[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  userId    String    @db.Uuid
  postId    String
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Like {
  id        Int       @id @default(autoincrement())
  userId    String    @db.Uuid
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Follow {
  userId       String    @db.Uuid
  followUserId String    @db.Uuid
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  deletedAt    DateTime?

  user       User @relation("followee", fields: [userId], references: [id])
  followUser User @relation("follower", fields: [followUserId], references: [id])

  @@id([userId, followUserId])
}
