generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DATABASE_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../src/types/zod"
  createInputTypes                 = false
  writeNullishInModelTypes         = true
  createOptionalDefaultValuesTypes = true
}

model User {
  id           String    @id @default(dbgenerated("auth.uid()")) @db.Uuid
  /// @zod.string.min(6).max(32)
  account_name String    @db.VarChar(32)
  /// @zod.string.min(1).max(32)
  display_name String    @db.VarChar(32)
  biography    String?
  /// @zod.string.url()
  external_url String?   @db.VarChar(192)
  /// @zod.string.url()
  icon_url     String?   @db.VarChar(192)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt
  deleted_at   DateTime?

  posts     Post[]
  comments  Comment[]
  likes     Like[]
  follows   Follow[]  @relation("follower")
  followers Follow[]  @relation("followee")
}

model Post {
  /// @zod.string.max(10)
  id          String    @id @db.VarChar(10)
  user_id     String    @default(dbgenerated("auth.uid()")) @db.Uuid
  caption     String    @default("")
  /// @zod.string.url()
  image_url   String    @db.VarChar(192)
  camera      String?   @db.VarChar(192)
  lens        String?   @db.VarChar(192)
  focalLength String?   @db.VarChar(192)
  fnumber     String?   @db.VarChar(192)
  shutter     String?   @db.VarChar(192)
  iso         String?   @db.VarChar(192)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  deleted_at  DateTime?

  user     User      @relation(fields: [user_id], references: [id])
  comments Comment[]
  likes    Like[]
}

model Comment {
  id         Int       @id @default(autoincrement())
  user_id    String    @default(dbgenerated("auth.uid()")) @db.Uuid
  post_id    String
  text       String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])
}

model Like {
  id         Int       @id @default(autoincrement())
  user_id    String    @default(dbgenerated("auth.uid()")) @db.Uuid
  post_id    String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])

  @@unique([user_id, post_id])
}

model Follow {
  user_id        String    @default(dbgenerated("auth.uid()")) @db.Uuid
  follow_user_id String    @db.Uuid
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now()) @updatedAt
  deleted_at     DateTime?

  user       User @relation("followee", fields: [user_id], references: [id])
  followUser User @relation("follower", fields: [follow_user_id], references: [id])

  @@id([user_id, follow_user_id])
}
